///////////////////// ETAPA 3 ///////////////////////



///////////////////// ETAPA 2 ///////////////////////


	PARA QUARTA:
		X - Implementar a parte das declarações globais.
		X- Implementar comando vazio.
		- Possiblidade de não ter funções ou de não ter declarações de variáveis globais.
		- Criar o %union com symbol para guardar o & dos nodos da hash.
		- Podemos deixar as recursões em um linha só como o professor
			- Com isso fica mais fácil implementar o segundo tópico (de não haver funçẽs ou decl. de var. global).
	BUG[!]:
		- Possivelmente mesmo bug do Taylor.
		- Funciona com funções e funciona com declaraçãoes, porém não simultaneamente.
		



Especificação:
	- Uma única chamada da yyparse()
		- exit(0) se sucesso
		- exit(3) se falha

Linguagem:
	- Composta por um conjunto de FUNÇÕES e por um conjunto de DECLARAÇÃO
	DE VARIAVEIS GLOBAIS, respectivamente[!]

	- Declaração de variáveis globais
		- Sempre terminadas por ';'
		- Varíaveis (Não vetores)
			- TIPO NOME : VALOR_INICIAL;
				- Inicializaao obrigatória
			- int, real, char ou bool

		- Vetores
			- TIPO NOME[TAM_INT] : VI1 VI2 VI3 VI4 VI5 VI6;
				- Separados por espaços
			- TIPO NOME[TAM_INT];
				- Inicilização opcional
			- - int, real, char ou bool
				
	- Função
		X Sempre terminadas por ';', pois também é uma declaração global
		X cabeçalho -> corpo (comando) [Começo do doc]
		X Cabeçalho -> Lista de variáveis locais -> corpo [Definição de funções]
		X Cabeçalho
			X RETURN_VALUE FUNCTION_NAME (P1,P2,P3,P4/nada)
			X Parâmetros (Pn acima):
				X TIPO NOME
				X Não pode ser Vetor
		X Lista de variáveis locais
			X Mesmo modelo das globais, mas NÃO pode haver vetores.
		- Comando

	- Comando [Começo do doc][Desconsiderar?]
		- Atribuição, controle de fluxo ou os comandos de input, output e
		return
		- Blocos são considerados sintaticamente como comandos, podendo
		aparecer no lugar de qualquer comando

	X Bloco de comandos
		X {CMD;CMD;CMD;CMD}
		X entre '{' '}'
		X Possívelmente vazio
		X Considerado um comando simples

	X Comando simples (é um comando)
		- Atribuição, controle de fluxo ou os comandos de input, output,
		return e vazio.
		X Atribuição
			X varíavel := expressão
			X expressão =: varíavel
			X vetor[expressão] := expressão
			X expressão =: vetor[expressão]
		X input
			X input VARIABLE_NAME
			[?]- Se disponível e compatível, será colocado [WTF?] (What?)
		X output
			X output E1,E2,E3
			X Elemento (En acima)
				[?]- String ou expressão aritmética a ser impressa (Consideramos expressão em geral)
		X return
			X return EXPRESSAO
				[?]- Expressão que contém o valor de retorno (Consideramos expressão em geral)

		X Comandos para controle de fluxo (é um comando)
			X if (expressão) COMANDO
			X if (expressão) COMANDO else COMANDO
			X if (expressão) COMANDO loop
			X ALGO IMPORTANTE SOBRE O ';' AQUI [Ler doc (sublinhado)]

	X- Expressão aritmética (é um comando)
			- Identificadores como folhas (opcionalmente com o [INDEX] p/ vetores), 
			literais numéricos e ASCII.
			- Podem ser formadas recursivamente com operadores aritméticos [WTF?]
			- Permitem o uso de parênteses para associatividade [WTF?]

	X- Expressão Lógica (Booleana) (é um comando)
			- Formada atraves de:
				- Operadores relacionais aplicados à expressões aritméticas
				- Operadores lógicos aplicados à expressões lógicas
				- Recursivamente [SOLTO NO FINAL DA FRASE DO DOC :)]

	X- FRASE SOLTA NO PARÁGRAFO: "Expressões Aritméticas e Lógicas"
	Finalmente, um operando possível de expressão é uma chamada de função, feita pelo seu nome, seguido de argumentos entre parênteses.	



///////////////////// ETAPA 1 ///////////////////////

Regras:
	K- Palavras reservadas.
	K- Caracteres especiais (Lembrar que entre ele há operadores)
	K- Operadores compostos.
	K- Identificadores
	K- Tratar comentários.
	K- Literais inteiros.
	K - Literais caracter
	K- Literais String (usar técnica de comentário).
	K- Literais TRUE e FALSE.
	K- Analizar processamento de escape.
		K- Extender.


Implementações à parte:
	K- Hash table.
	K- Implemenar tipo na Hash.
	K- Contar as linhas.
	K- String e char vazios.

Recomendações:
	K- Usa apenas make, lex ou flex e gcc.
	K- Olhar a main do Johann na foto :)
	K- Implementar a função "void initMe(void)" [OBRIGATÓRIO]
	K- Todos arquivos na mesma parta, i.e não usar diretórios.

Verificações:
	K- Verificar se o tokens.h foi completamente implementado.
	K - Verificar toda lista de regras.

Antes de entregar:
	K - Colocar o nome dos componentes do grupo em comentários no início
	de todos os códigos fonte.
	K - Verificar bem todas as regras (se respeitam a especificação).
	K - Tentar compilar em outro sistema (fora o usado para desenvolver).
	K - Verificar o acesso ao arquivo que disponibilizado no server http.
	
	
Para o Yohann
	K- Enviar email com os nomes da dupla e usuários do INF
